{"ast":null,"code":"// import { createContext, useContext, useState, useEffect } from \"react\";\n// // import SockJS from \"sockjs-client\";\n// // import { over } from \"stompjs\";\n// import { useAuth } from \"./AuthContext\";\n\n// const SocketContext = createContext();\n\n// export const SocketProvider = ({ children }) => {\n//   const { username } = useAuth();\n//   const [stompClient, setStompClient] = useState(null);\n\n//   useEffect(() => {\n//     if (!username) return;\n\n//     const connectWebSocket = () => {\n//       const socket = new SockJS(\"http://localhost:8080/ws\");\n//       const client = over(socket);\n//       client.connect({}, () => {\n//         console.log(\"✅ Connected WebSocket\");\n//         client.send(\"/app/chat.addUser\", {}, JSON.stringify({ sender: username }));\n//       });\n//       setStompClient(client);\n//     };\n\n//     connectWebSocket();\n//   }, [username]);\n\n//   return (\n//     <SocketContext.Provider value={{ stompClient }}>\n//       {children}\n//     </SocketContext.Provider>\n//   );\n// };\n// export const useMessageListener = (callback) => {\n//   useEffect(() => {\n//     socketService.onMessage(callback);\n//   }, [callback]);\n// };\n\n// export const useTypingListener = (callback) => {\n//   // Nếu FE đang gọi useTypingListener, ta chỉ mock tạm\n//   useEffect(() => {\n//     const interval = setInterval(() => {\n//       callback && callback(\"Mock user đang nhập...\");\n//     }, 7000);\n//     return () => clearInterval(interval);\n//   }, [callback]);\n// };\n\n// export const useSocket = () => useContext(SocketContext);","map":{"version":3,"names":[],"sources":["D:/mid-project-582786/source/fe/src/context/SocketContext.js"],"sourcesContent":["// import { createContext, useContext, useState, useEffect } from \"react\";\r\n// // import SockJS from \"sockjs-client\";\r\n// // import { over } from \"stompjs\";\r\n// import { useAuth } from \"./AuthContext\";\r\n\r\n// const SocketContext = createContext();\r\n\r\n// export const SocketProvider = ({ children }) => {\r\n//   const { username } = useAuth();\r\n//   const [stompClient, setStompClient] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     if (!username) return;\r\n\r\n//     const connectWebSocket = () => {\r\n//       const socket = new SockJS(\"http://localhost:8080/ws\");\r\n//       const client = over(socket);\r\n//       client.connect({}, () => {\r\n//         console.log(\"✅ Connected WebSocket\");\r\n//         client.send(\"/app/chat.addUser\", {}, JSON.stringify({ sender: username }));\r\n//       });\r\n//       setStompClient(client);\r\n//     };\r\n\r\n//     connectWebSocket();\r\n//   }, [username]);\r\n\r\n//   return (\r\n//     <SocketContext.Provider value={{ stompClient }}>\r\n//       {children}\r\n//     </SocketContext.Provider>\r\n//   );\r\n// };\r\n// export const useMessageListener = (callback) => {\r\n//   useEffect(() => {\r\n//     socketService.onMessage(callback);\r\n//   }, [callback]);\r\n// };\r\n\r\n// export const useTypingListener = (callback) => {\r\n//   // Nếu FE đang gọi useTypingListener, ta chỉ mock tạm\r\n//   useEffect(() => {\r\n//     const interval = setInterval(() => {\r\n//       callback && callback(\"Mock user đang nhập...\");\r\n//     }, 7000);\r\n//     return () => clearInterval(interval);\r\n//   }, [callback]);\r\n// };\r\n\r\n\r\n// export const useSocket = () => useContext(SocketContext);\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}