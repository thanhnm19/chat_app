{"ast":null,"code":"// src/services/mockAuthService.js\n// Mock service để test frontend không cần backend\n\nimport { mockCurrentUser, mockUsers } from './mockData';\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\nconst mockAuthService = {\n  register: async userData => {\n    await delay(500); // Giả lập network delay\n\n    // Giả lập đăng ký thành công\n    const newUser = {\n      ...mockCurrentUser,\n      username: userData.username,\n      email: userData.email\n    };\n    localStorage.setItem('user', JSON.stringify(newUser));\n    return newUser;\n  },\n  login: async credentials => {\n    await delay(500);\n\n    // Accept any email/password for testing\n    console.log('Mock login with:', credentials);\n    localStorage.setItem('user', JSON.stringify(mockCurrentUser));\n    return mockCurrentUser;\n  },\n  logout: () => {\n    localStorage.removeItem('user');\n  },\n  getCurrentUser: () => {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  },\n  getToken: () => {\n    const user = mockAuthService.getCurrentUser();\n    return user === null || user === void 0 ? void 0 : user.token;\n  },\n  isAuthenticated: () => {\n    return !!mockAuthService.getToken();\n  },\n  updateUser: async (userId, userData) => {\n    await delay(500);\n    const currentUser = mockAuthService.getCurrentUser();\n    const updatedUser = {\n      ...currentUser,\n      ...userData\n    };\n    localStorage.setItem('user', JSON.stringify(updatedUser));\n    return updatedUser;\n  },\n  getAllUsers: async () => {\n    await delay(500);\n\n    // Trả về danh sách users, loại trừ current user\n    return mockUsers.filter(u => u._id !== mockCurrentUser._id);\n  }\n};\nexport default mockAuthService;","map":{"version":3,"names":["mockCurrentUser","mockUsers","delay","ms","Promise","resolve","setTimeout","mockAuthService","register","userData","newUser","username","email","localStorage","setItem","JSON","stringify","login","credentials","console","log","logout","removeItem","getCurrentUser","user","getItem","parse","getToken","token","isAuthenticated","updateUser","userId","currentUser","updatedUser","getAllUsers","filter","u","_id"],"sources":["D:/mid-project-582786/source/fe/src/services/mockAuthService.js"],"sourcesContent":["// src/services/mockAuthService.js\r\n// Mock service để test frontend không cần backend\r\n\r\nimport { mockCurrentUser, mockUsers } from './mockData';\r\n\r\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nconst mockAuthService = {\r\n  register: async (userData) => {\r\n    await delay(500); // Giả lập network delay\r\n    \r\n    // Giả lập đăng ký thành công\r\n    const newUser = {\r\n      ...mockCurrentUser,\r\n      username: userData.username,\r\n      email: userData.email\r\n    };\r\n    \r\n    localStorage.setItem('user', JSON.stringify(newUser));\r\n    return newUser;\r\n  },\r\n\r\n  login: async (credentials) => {\r\n    await delay(500);\r\n    \r\n    // Accept any email/password for testing\r\n    console.log('Mock login with:', credentials);\r\n    \r\n    localStorage.setItem('user', JSON.stringify(mockCurrentUser));\r\n    return mockCurrentUser;\r\n  },\r\n\r\n  logout: () => {\r\n    localStorage.removeItem('user');\r\n  },\r\n\r\n  getCurrentUser: () => {\r\n    const user = localStorage.getItem('user');\r\n    return user ? JSON.parse(user) : null;\r\n  },\r\n\r\n  getToken: () => {\r\n    const user = mockAuthService.getCurrentUser();\r\n    return user?.token;\r\n  },\r\n\r\n  isAuthenticated: () => {\r\n    return !!mockAuthService.getToken();\r\n  },\r\n\r\n  updateUser: async (userId, userData) => {\r\n    await delay(500);\r\n    \r\n    const currentUser = mockAuthService.getCurrentUser();\r\n    const updatedUser = { ...currentUser, ...userData };\r\n    localStorage.setItem('user', JSON.stringify(updatedUser));\r\n    \r\n    return updatedUser;\r\n  },\r\n\r\n  getAllUsers: async () => {\r\n    await delay(500);\r\n    \r\n    // Trả về danh sách users, loại trừ current user\r\n    return mockUsers.filter(u => u._id !== mockCurrentUser._id);\r\n  }\r\n};\r\n\r\nexport default mockAuthService;"],"mappings":"AAAA;AACA;;AAEA,SAASA,eAAe,EAAEC,SAAS,QAAQ,YAAY;AAEvD,MAAMC,KAAK,GAAIC,EAAE,IAAK,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEF,EAAE,CAAC,CAAC;AAErE,MAAMI,eAAe,GAAG;EACtBC,QAAQ,EAAE,MAAOC,QAAQ,IAAK;IAC5B,MAAMP,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;IAElB;IACA,MAAMQ,OAAO,GAAG;MACd,GAAGV,eAAe;MAClBW,QAAQ,EAAEF,QAAQ,CAACE,QAAQ;MAC3BC,KAAK,EAAEH,QAAQ,CAACG;IAClB,CAAC;IAEDC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACN,OAAO,CAAC,CAAC;IACrD,OAAOA,OAAO;EAChB,CAAC;EAEDO,KAAK,EAAE,MAAOC,WAAW,IAAK;IAC5B,MAAMhB,KAAK,CAAC,GAAG,CAAC;;IAEhB;IACAiB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,WAAW,CAAC;IAE5CL,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAAChB,eAAe,CAAC,CAAC;IAC7D,OAAOA,eAAe;EACxB,CAAC;EAEDqB,MAAM,EAAEA,CAAA,KAAM;IACZR,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EAEDC,cAAc,EAAEA,CAAA,KAAM;IACpB,MAAMC,IAAI,GAAGX,YAAY,CAACY,OAAO,CAAC,MAAM,CAAC;IACzC,OAAOD,IAAI,GAAGT,IAAI,CAACW,KAAK,CAACF,IAAI,CAAC,GAAG,IAAI;EACvC,CAAC;EAEDG,QAAQ,EAAEA,CAAA,KAAM;IACd,MAAMH,IAAI,GAAGjB,eAAe,CAACgB,cAAc,CAAC,CAAC;IAC7C,OAAOC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEI,KAAK;EACpB,CAAC;EAEDC,eAAe,EAAEA,CAAA,KAAM;IACrB,OAAO,CAAC,CAACtB,eAAe,CAACoB,QAAQ,CAAC,CAAC;EACrC,CAAC;EAEDG,UAAU,EAAE,MAAAA,CAAOC,MAAM,EAAEtB,QAAQ,KAAK;IACtC,MAAMP,KAAK,CAAC,GAAG,CAAC;IAEhB,MAAM8B,WAAW,GAAGzB,eAAe,CAACgB,cAAc,CAAC,CAAC;IACpD,MAAMU,WAAW,GAAG;MAAE,GAAGD,WAAW;MAAE,GAAGvB;IAAS,CAAC;IACnDI,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACiB,WAAW,CAAC,CAAC;IAEzD,OAAOA,WAAW;EACpB,CAAC;EAEDC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,MAAMhC,KAAK,CAAC,GAAG,CAAC;;IAEhB;IACA,OAAOD,SAAS,CAACkC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAKrC,eAAe,CAACqC,GAAG,CAAC;EAC7D;AACF,CAAC;AAED,eAAe9B,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}