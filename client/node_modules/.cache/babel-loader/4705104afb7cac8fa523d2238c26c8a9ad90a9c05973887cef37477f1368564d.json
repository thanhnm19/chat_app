{"ast":null,"code":"import axios from 'axios';\n\n// Cấu hình base URL - Thay đổi khi có backend\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst authService = {\n  // Đăng ký user mới\n  register: async userData => {\n    try {\n      const response = await axios.post(`${API_URL}/auth/register`, userData);\n      if (response.data.token) {\n        localStorage.setItem('user', JSON.stringify(response.data));\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || {\n        message: 'Đăng ký thất bại'\n      };\n    }\n  },\n  // Đăng nhập\n  login: async credentials => {\n    try {\n      const response = await axios.post(`${API_URL}/auth/login`, credentials);\n      if (response.data.token) {\n        localStorage.setItem('user', JSON.stringify(response.data));\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n        message: 'Đăng nhập thất bại'\n      };\n    }\n  },\n  // Đăng xuất\n  logout: () => {\n    localStorage.removeItem('user');\n  },\n  // Lấy thông tin user hiện tại từ localStorage\n  getCurrentUser: () => {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  },\n  // Lấy token\n  getToken: () => {\n    const user = authService.getCurrentUser();\n    return user === null || user === void 0 ? void 0 : user.token;\n  },\n  // Kiểm tra đã đăng nhập chưa\n  isAuthenticated: () => {\n    return !!authService.getToken();\n  },\n  // Cập nhật thông tin user\n  updateUser: async (userId, userData) => {\n    try {\n      const response = await axios.put(`${API_URL}/auth/user/${userId}`, userData, {\n        headers: {\n          Authorization: `Bearer ${authService.getToken()}`\n        }\n      });\n\n      // Cập nhật localStorage\n      const currentUser = authService.getCurrentUser();\n      const updatedUser = {\n        ...currentUser,\n        ...response.data\n      };\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      return response.data;\n    } catch (error) {\n      var _error$response3;\n      throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || {\n        message: 'Cập nhật thất bại'\n      };\n    }\n  },\n  // Lấy danh sách tất cả users (để search, add friend...)\n  getAllUsers: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/auth/users`, {\n        headers: {\n          Authorization: `Bearer ${authService.getToken()}`\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response4;\n      throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || {\n        message: 'Không thể tải danh sách người dùng'\n      };\n    }\n  }\n};\nexport default authService;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","authService","register","userData","response","post","data","token","localStorage","setItem","JSON","stringify","error","_error$response","message","login","credentials","_error$response2","logout","removeItem","getCurrentUser","user","getItem","parse","getToken","isAuthenticated","updateUser","userId","put","headers","Authorization","currentUser","updatedUser","_error$response3","getAllUsers","get","_error$response4"],"sources":["D:/mid-project-582786/source/fe/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Cấu hình base URL - Thay đổi khi có backend\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconst authService = {\r\n  // Đăng ký user mới\r\n  register: async (userData) => {\r\n    try {\r\n      const response = await axios.post(`${API_URL}/auth/register`, userData);\r\n      if (response.data.token) {\r\n        localStorage.setItem('user', JSON.stringify(response.data));\r\n      }\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { message: 'Đăng ký thất bại' };\r\n    }\r\n  },\r\n\r\n  // Đăng nhập\r\n  login: async (credentials) => {\r\n    try {\r\n      const response = await axios.post(`${API_URL}/auth/login`, credentials);\r\n      if (response.data.token) {\r\n        localStorage.setItem('user', JSON.stringify(response.data));\r\n      }\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { message: 'Đăng nhập thất bại' };\r\n    }\r\n  },\r\n\r\n  // Đăng xuất\r\n  logout: () => {\r\n    localStorage.removeItem('user');\r\n  },\r\n\r\n  // Lấy thông tin user hiện tại từ localStorage\r\n  getCurrentUser: () => {\r\n    const user = localStorage.getItem('user');\r\n    return user ? JSON.parse(user) : null;\r\n  },\r\n\r\n  // Lấy token\r\n  getToken: () => {\r\n    const user = authService.getCurrentUser();\r\n    return user?.token;\r\n  },\r\n\r\n  // Kiểm tra đã đăng nhập chưa\r\n  isAuthenticated: () => {\r\n    return !!authService.getToken();\r\n  },\r\n\r\n  // Cập nhật thông tin user\r\n  updateUser: async (userId, userData) => {\r\n    try {\r\n      const response = await axios.put(\r\n        `${API_URL}/auth/user/${userId}`,\r\n        userData,\r\n        {\r\n          headers: { Authorization: `Bearer ${authService.getToken()}` }\r\n        }\r\n      );\r\n      \r\n      // Cập nhật localStorage\r\n      const currentUser = authService.getCurrentUser();\r\n      const updatedUser = { ...currentUser, ...response.data };\r\n      localStorage.setItem('user', JSON.stringify(updatedUser));\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { message: 'Cập nhật thất bại' };\r\n    }\r\n  },\r\n\r\n  // Lấy danh sách tất cả users (để search, add friend...)\r\n  getAllUsers: async () => {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/auth/users`, {\r\n        headers: { Authorization: `Bearer ${authService.getToken()}` }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { message: 'Không thể tải danh sách người dùng' };\r\n    }\r\n  }\r\n};\r\n\r\nexport default authService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}