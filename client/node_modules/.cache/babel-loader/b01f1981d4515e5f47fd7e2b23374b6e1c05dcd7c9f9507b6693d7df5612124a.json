{"ast":null,"code":"var _jsxFileName = \"D:\\\\mid-project-582786\\\\source\\\\fe\\\\src\\\\context\\\\SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$();\n// src/context/SocketContext.js\nimport React, { createContext, useContext, useEffect, useState, useRef } from 'react';\nimport { createMockSocket } from '../services/mockSocket'; // 🔥 MOCK MODE\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nexport const useSocket = () => {\n  _s();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within SocketProvider');\n  }\n  return context;\n};\n_s(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SocketProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    user,\n    isAuthenticated\n  } = useAuth();\n  const [socket, setSocket] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const socketRef = useRef(null);\n\n  // Kết nối Socket khi user đăng nhập\n  useEffect(() => {\n    if (isAuthenticated && user !== null && user !== void 0 && user.token) {\n      // 🔥 MOCK MODE - Dùng mock socket\n      const newSocket = createMockSocket();\n      socketRef.current = newSocket;\n      setSocket(newSocket);\n\n      // Event handlers\n      newSocket.on('connect', () => {\n        console.log('✅ Socket connected:', newSocket.id);\n        setConnected(true);\n      });\n      newSocket.on('disconnect', () => {\n        console.log('❌ Socket disconnected');\n        setConnected(false);\n      });\n      newSocket.on('connect_error', error => {\n        console.error('Socket connection error:', error);\n        setConnected(false);\n      });\n\n      // Nhận danh sách user online\n      newSocket.on('onlineUsers', users => {\n        console.log('👥 Online users:', users);\n        setOnlineUsers(users);\n      });\n\n      // Cleanup khi unmount hoặc user logout\n      return () => {\n        newSocket.close();\n        setSocket(null);\n        setConnected(false);\n      };\n    } else {\n      // Ngắt kết nối khi logout\n      if (socketRef.current) {\n        socketRef.current.close();\n        setSocket(null);\n        setConnected(false);\n        setOnlineUsers([]);\n      }\n    }\n  }, [isAuthenticated, user === null || user === void 0 ? void 0 : user.token]);\n\n  // ========== EMIT EVENTS ==========\n\n  // Gửi tin nhắn\n  const sendMessage = messageData => {\n    if (socket && connected) {\n      socket.emit('sendMessage', messageData);\n    }\n  };\n\n  // Join conversation room\n  const joinConversation = conversationId => {\n    if (socket && connected) {\n      socket.emit('joinConversation', conversationId);\n    }\n  };\n\n  // Leave conversation room\n  const leaveConversation = conversationId => {\n    if (socket && connected) {\n      socket.emit('leaveConversation', conversationId);\n    }\n  };\n\n  // Gửi typing indicator\n  const sendTyping = (conversationId, isTyping) => {\n    if (socket && connected) {\n      socket.emit('typing', {\n        conversationId,\n        isTyping\n      });\n    }\n  };\n\n  // Đánh dấu tin nhắn đã xem\n  const markAsRead = (conversationId, messageIds) => {\n    if (socket && connected) {\n      socket.emit('markAsRead', {\n        conversationId,\n        messageIds\n      });\n    }\n  };\n\n  // Đánh dấu tin nhắn đã nhận\n  const markAsReceived = messageId => {\n    if (socket && connected) {\n      socket.emit('messageReceived', {\n        messageId\n      });\n    }\n  };\n\n  // ========== LISTEN TO EVENTS ==========\n\n  // Subscribe to specific event\n  const on = (eventName, callback) => {\n    if (socket) {\n      socket.on(eventName, callback);\n    }\n  };\n\n  // Unsubscribe from specific event\n  const off = (eventName, callback) => {\n    if (socket) {\n      socket.off(eventName, callback);\n    }\n  };\n\n  // Kiểm tra user có online không\n  const isUserOnline = userId => {\n    return onlineUsers.includes(userId);\n  };\n  const value = {\n    socket,\n    connected,\n    onlineUsers,\n    isUserOnline,\n    // Emit events\n    sendMessage,\n    joinConversation,\n    leaveConversation,\n    sendTyping,\n    markAsRead,\n    markAsReceived,\n    // Listen to events\n    on,\n    off\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook để lắng nghe message mới\n_s2(SocketProvider, \"5m7d47ELJSYTpajLchV/B7TZIlE=\", false, function () {\n  return [useAuth];\n});\n_c = SocketProvider;\nexport const useMessageListener = callback => {\n  _s3();\n  const {\n    socket\n  } = useSocket();\n  useEffect(() => {\n    if (socket) {\n      socket.on('newMessage', callback);\n      return () => {\n        socket.off('newMessage', callback);\n      };\n    }\n  }, [socket, callback]);\n};\n\n// Hook để lắng nghe typing\n_s3(useMessageListener, \"YPCSjKP+yOtUI5pciF4AGGR0TaI=\", false, function () {\n  return [useSocket];\n});\nexport const useTypingListener = callback => {\n  _s4();\n  const {\n    socket\n  } = useSocket();\n  useEffect(() => {\n    if (socket) {\n      socket.on('userTyping', callback);\n      return () => {\n        socket.off('userTyping', callback);\n      };\n    }\n  }, [socket, callback]);\n};\n\n// Hook để lắng nghe message status updates\n_s4(useTypingListener, \"YPCSjKP+yOtUI5pciF4AGGR0TaI=\", false, function () {\n  return [useSocket];\n});\nexport const useMessageStatusListener = callback => {\n  _s5();\n  const {\n    socket\n  } = useSocket();\n  useEffect(() => {\n    if (socket) {\n      socket.on('messageStatusUpdate', callback);\n      return () => {\n        socket.off('messageStatusUpdate', callback);\n      };\n    }\n  }, [socket, callback]);\n};\n_s5(useMessageStatusListener, \"YPCSjKP+yOtUI5pciF4AGGR0TaI=\", false, function () {\n  return [useSocket];\n});\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useRef","createMockSocket","useAuth","jsxDEV","_jsxDEV","SocketContext","useSocket","_s","context","Error","SocketProvider","children","_s2","user","isAuthenticated","socket","setSocket","connected","setConnected","onlineUsers","setOnlineUsers","socketRef","token","newSocket","current","on","console","log","id","error","users","close","sendMessage","messageData","emit","joinConversation","conversationId","leaveConversation","sendTyping","isTyping","markAsRead","messageIds","markAsReceived","messageId","eventName","callback","off","isUserOnline","userId","includes","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useMessageListener","_s3","useTypingListener","_s4","useMessageStatusListener","_s5","$RefreshReg$"],"sources":["D:/mid-project-582786/source/fe/src/context/SocketContext.js"],"sourcesContent":["// src/context/SocketContext.js\r\nimport React, { createContext, useContext, useEffect, useState, useRef } from 'react';\r\nimport { createMockSocket } from '../services/mockSocket'; // 🔥 MOCK MODE\r\nimport { useAuth } from './AuthContext';\r\n\r\nconst SocketContext = createContext();\r\n\r\nexport const useSocket = () => {\r\n  const context = useContext(SocketContext);\r\n  if (!context) {\r\n    throw new Error('useSocket must be used within SocketProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n  const { user, isAuthenticated } = useAuth();\r\n  const [socket, setSocket] = useState(null);\r\n  const [connected, setConnected] = useState(false);\r\n  const [onlineUsers, setOnlineUsers] = useState([]);\r\n  const socketRef = useRef(null);\r\n\r\n  // Kết nối Socket khi user đăng nhập\r\n  useEffect(() => {\r\n    if (isAuthenticated && user?.token) {\r\n      // 🔥 MOCK MODE - Dùng mock socket\r\n      const newSocket = createMockSocket();\r\n\r\n      socketRef.current = newSocket;\r\n      setSocket(newSocket);\r\n\r\n      // Event handlers\r\n      newSocket.on('connect', () => {\r\n        console.log('✅ Socket connected:', newSocket.id);\r\n        setConnected(true);\r\n      });\r\n\r\n      newSocket.on('disconnect', () => {\r\n        console.log('❌ Socket disconnected');\r\n        setConnected(false);\r\n      });\r\n\r\n      newSocket.on('connect_error', (error) => {\r\n        console.error('Socket connection error:', error);\r\n        setConnected(false);\r\n      });\r\n\r\n      // Nhận danh sách user online\r\n      newSocket.on('onlineUsers', (users) => {\r\n        console.log('👥 Online users:', users);\r\n        setOnlineUsers(users);\r\n      });\r\n\r\n      // Cleanup khi unmount hoặc user logout\r\n      return () => {\r\n        newSocket.close();\r\n        setSocket(null);\r\n        setConnected(false);\r\n      };\r\n    } else {\r\n      // Ngắt kết nối khi logout\r\n      if (socketRef.current) {\r\n        socketRef.current.close();\r\n        setSocket(null);\r\n        setConnected(false);\r\n        setOnlineUsers([]);\r\n      }\r\n    }\r\n  }, [isAuthenticated, user?.token]);\r\n\r\n  // ========== EMIT EVENTS ==========\r\n\r\n  // Gửi tin nhắn\r\n  const sendMessage = (messageData) => {\r\n    if (socket && connected) {\r\n      socket.emit('sendMessage', messageData);\r\n    }\r\n  };\r\n\r\n  // Join conversation room\r\n  const joinConversation = (conversationId) => {\r\n    if (socket && connected) {\r\n      socket.emit('joinConversation', conversationId);\r\n    }\r\n  };\r\n\r\n  // Leave conversation room\r\n  const leaveConversation = (conversationId) => {\r\n    if (socket && connected) {\r\n      socket.emit('leaveConversation', conversationId);\r\n    }\r\n  };\r\n\r\n  // Gửi typing indicator\r\n  const sendTyping = (conversationId, isTyping) => {\r\n    if (socket && connected) {\r\n      socket.emit('typing', { conversationId, isTyping });\r\n    }\r\n  };\r\n\r\n  // Đánh dấu tin nhắn đã xem\r\n  const markAsRead = (conversationId, messageIds) => {\r\n    if (socket && connected) {\r\n      socket.emit('markAsRead', { conversationId, messageIds });\r\n    }\r\n  };\r\n\r\n  // Đánh dấu tin nhắn đã nhận\r\n  const markAsReceived = (messageId) => {\r\n    if (socket && connected) {\r\n      socket.emit('messageReceived', { messageId });\r\n    }\r\n  };\r\n\r\n  // ========== LISTEN TO EVENTS ==========\r\n\r\n  // Subscribe to specific event\r\n  const on = (eventName, callback) => {\r\n    if (socket) {\r\n      socket.on(eventName, callback);\r\n    }\r\n  };\r\n\r\n  // Unsubscribe from specific event\r\n  const off = (eventName, callback) => {\r\n    if (socket) {\r\n      socket.off(eventName, callback);\r\n    }\r\n  };\r\n\r\n  // Kiểm tra user có online không\r\n  const isUserOnline = (userId) => {\r\n    return onlineUsers.includes(userId);\r\n  };\r\n\r\n  const value = {\r\n    socket,\r\n    connected,\r\n    onlineUsers,\r\n    isUserOnline,\r\n    // Emit events\r\n    sendMessage,\r\n    joinConversation,\r\n    leaveConversation,\r\n    sendTyping,\r\n    markAsRead,\r\n    markAsReceived,\r\n    // Listen to events\r\n    on,\r\n    off\r\n  };\r\n\r\n  return (\r\n    <SocketContext.Provider value={value}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  );\r\n};\r\n\r\n// Hook để lắng nghe message mới\r\nexport const useMessageListener = (callback) => {\r\n  const { socket } = useSocket();\r\n\r\n  useEffect(() => {\r\n    if (socket) {\r\n      socket.on('newMessage', callback);\r\n      return () => {\r\n        socket.off('newMessage', callback);\r\n      };\r\n    }\r\n  }, [socket, callback]);\r\n};\r\n\r\n// Hook để lắng nghe typing\r\nexport const useTypingListener = (callback) => {\r\n  const { socket } = useSocket();\r\n\r\n  useEffect(() => {\r\n    if (socket) {\r\n      socket.on('userTyping', callback);\r\n      return () => {\r\n        socket.off('userTyping', callback);\r\n      };\r\n    }\r\n  }, [socket, callback]);\r\n};\r\n\r\n// Hook để lắng nghe message status updates\r\nexport const useMessageStatusListener = (callback) => {\r\n  const { socket } = useSocket();\r\n\r\n  useEffect(() => {\r\n    if (socket) {\r\n      socket.on('messageStatusUpdate', callback);\r\n      return () => {\r\n        socket.off('messageStatusUpdate', callback);\r\n      };\r\n    }\r\n  }, [socket, callback]);\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}