{"ast":null,"code":"var _jsxFileName = \"D:\\\\mid-project-582786\\\\source\\\\fe\\\\src\\\\context\\\\SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import { createContext, useContext, useState, useEffect } from \"react\";\n// // import SockJS from \"sockjs-client\";\n// // import { over } from \"stompjs\";\n// import { useAuth } from \"./AuthContext\";\n\n// const SocketContext = createContext();\n\n// export const SocketProvider = ({ children }) => {\n//   const { username } = useAuth();\n//   const [stompClient, setStompClient] = useState(null);\n\n//   useEffect(() => {\n//     if (!username) return;\n\n//     const connectWebSocket = () => {\n//       const socket = new SockJS(\"http://localhost:8080/ws\");\n//       const client = over(socket);\n//       client.connect({}, () => {\n//         console.log(\"✅ Connected WebSocket\");\n//         client.send(\"/app/chat.addUser\", {}, JSON.stringify({ sender: username }));\n//       });\n//       setStompClient(client);\n//     };\n\n//     connectWebSocket();\n//   }, [username]);\n\n//   return (\n//     <SocketContext.Provider value={{ stompClient }}>\n//       {children}\n//     </SocketContext.Provider>\n//   );\n// };\n// export const useMessageListener = (callback) => {\n//   useEffect(() => {\n//     socketService.onMessage(callback);\n//   }, [callback]);\n// };\n\n// export const useTypingListener = (callback) => {\n//   // Nếu FE đang gọi useTypingListener, ta chỉ mock tạm\n//   useEffect(() => {\n//     const interval = setInterval(() => {\n//       callback && callback(\"Mock user đang nhập...\");\n//     }, 7000);\n//     return () => clearInterval(interval);\n//   }, [callback]);\n// };\n\n// export const useSocket = () => useContext(SocketContext);\n\n// src/context/SocketContext.js\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { socketService } from \"../services\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nexport const SocketProvider = ({\n  children\n}) => {\n  _s();\n  const [connected, setConnected] = useState(false);\n  const [messages, setMessages] = useState([]);\n\n  // Giả lập kết nối socket\n  useEffect(() => {\n    console.log(\"🧩 Mock Socket connected\");\n    socketService.connect();\n    setConnected(true);\n\n    // Giả lập nhận tin nhắn từ server\n    socketService.onMessage(msg => {\n      console.log(\"📩 Mock message received:\", msg);\n      setMessages(prev => [...prev, msg]);\n    });\n    return () => {\n      console.log(\"🧩 Mock Socket disconnected\");\n      setConnected(false);\n    };\n  }, []);\n  const sendMessage = msg => {\n    console.log(\"✉️ Mock send message:\", msg);\n    socketService.sendMessage(msg);\n    setMessages(prev => [...prev, msg]);\n  };\n  const value = {\n    connected,\n    messages,\n    sendMessage\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook dùng trong ChatPage\n_s(SocketProvider, \"RE4g3ZjWzLEwfuvh+uEmDO2yOqg=\");\n_c = SocketProvider;\nexport const useSocket = () => {\n  _s2();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error(\"useSocket must be used within SocketProvider\");\n  }\n  return context;\n};\n_s2(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","socketService","jsxDEV","_jsxDEV","SocketContext","SocketProvider","children","_s","connected","setConnected","messages","setMessages","console","log","connect","onMessage","msg","prev","sendMessage","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSocket","_s2","context","Error","$RefreshReg$"],"sources":["D:/mid-project-582786/source/fe/src/context/SocketContext.js"],"sourcesContent":["// import { createContext, useContext, useState, useEffect } from \"react\";\r\n// // import SockJS from \"sockjs-client\";\r\n// // import { over } from \"stompjs\";\r\n// import { useAuth } from \"./AuthContext\";\r\n\r\n// const SocketContext = createContext();\r\n\r\n// export const SocketProvider = ({ children }) => {\r\n//   const { username } = useAuth();\r\n//   const [stompClient, setStompClient] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     if (!username) return;\r\n\r\n//     const connectWebSocket = () => {\r\n//       const socket = new SockJS(\"http://localhost:8080/ws\");\r\n//       const client = over(socket);\r\n//       client.connect({}, () => {\r\n//         console.log(\"✅ Connected WebSocket\");\r\n//         client.send(\"/app/chat.addUser\", {}, JSON.stringify({ sender: username }));\r\n//       });\r\n//       setStompClient(client);\r\n//     };\r\n\r\n//     connectWebSocket();\r\n//   }, [username]);\r\n\r\n//   return (\r\n//     <SocketContext.Provider value={{ stompClient }}>\r\n//       {children}\r\n//     </SocketContext.Provider>\r\n//   );\r\n// };\r\n// export const useMessageListener = (callback) => {\r\n//   useEffect(() => {\r\n//     socketService.onMessage(callback);\r\n//   }, [callback]);\r\n// };\r\n\r\n// export const useTypingListener = (callback) => {\r\n//   // Nếu FE đang gọi useTypingListener, ta chỉ mock tạm\r\n//   useEffect(() => {\r\n//     const interval = setInterval(() => {\r\n//       callback && callback(\"Mock user đang nhập...\");\r\n//     }, 7000);\r\n//     return () => clearInterval(interval);\r\n//   }, [callback]);\r\n// };\r\n\r\n\r\n// export const useSocket = () => useContext(SocketContext);\r\n\r\n\r\n// src/context/SocketContext.js\r\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { socketService } from \"../services\";\r\n\r\nconst SocketContext = createContext();\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n  const [connected, setConnected] = useState(false);\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  // Giả lập kết nối socket\r\n  useEffect(() => {\r\n    console.log(\"🧩 Mock Socket connected\");\r\n    socketService.connect();\r\n    setConnected(true);\r\n\r\n    // Giả lập nhận tin nhắn từ server\r\n    socketService.onMessage((msg) => {\r\n      console.log(\"📩 Mock message received:\", msg);\r\n      setMessages((prev) => [...prev, msg]);\r\n    });\r\n\r\n    return () => {\r\n      console.log(\"🧩 Mock Socket disconnected\");\r\n      setConnected(false);\r\n    };\r\n  }, []);\r\n\r\n  const sendMessage = (msg) => {\r\n    console.log(\"✉️ Mock send message:\", msg);\r\n    socketService.sendMessage(msg);\r\n    setMessages((prev) => [...prev, msg]);\r\n  };\r\n\r\n  const value = {\r\n    connected,\r\n    messages,\r\n    sendMessage,\r\n  };\r\n\r\n  return (\r\n    <SocketContext.Provider value={value}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  );\r\n};\r\n\r\n// Hook dùng trong ChatPage\r\nexport const useSocket = () => {\r\n  const context = useContext(SocketContext);\r\n  if (!context) {\r\n    throw new Error(\"useSocket must be used within SocketProvider\");\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":";;;AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAGA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC7E,SAASC,aAAa,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,aAAa,gBAAGP,aAAa,CAAC,CAAC;AAErC,OAAO,MAAMQ,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC9C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACAD,SAAS,CAAC,MAAM;IACda,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACvCZ,aAAa,CAACa,OAAO,CAAC,CAAC;IACvBL,YAAY,CAAC,IAAI,CAAC;;IAElB;IACAR,aAAa,CAACc,SAAS,CAAEC,GAAG,IAAK;MAC/BJ,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEG,GAAG,CAAC;MAC7CL,WAAW,CAAEM,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAED,GAAG,CAAC,CAAC;IACvC,CAAC,CAAC;IAEF,OAAO,MAAM;MACXJ,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC1CJ,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMS,WAAW,GAAIF,GAAG,IAAK;IAC3BJ,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEG,GAAG,CAAC;IACzCf,aAAa,CAACiB,WAAW,CAACF,GAAG,CAAC;IAC9BL,WAAW,CAAEM,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAED,GAAG,CAAC,CAAC;EACvC,CAAC;EAED,MAAMG,KAAK,GAAG;IACZX,SAAS;IACTE,QAAQ;IACRQ;EACF,CAAC;EAED,oBACEf,OAAA,CAACC,aAAa,CAACgB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAb,QAAA,EAClCA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;;AAED;AAAAjB,EAAA,CAzCaF,cAAc;AAAAoB,EAAA,GAAdpB,cAAc;AA0C3B,OAAO,MAAMqB,SAAS,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC7B,MAAMC,OAAO,GAAG9B,UAAU,CAACM,aAAa,CAAC;EACzC,IAAI,CAACwB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,SAAS;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}