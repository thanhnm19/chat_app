{"ast":null,"code":"// src/services/mockSocket.js\n// Mock Socket.IO Ä‘á»ƒ test frontend\n\nimport { mockUsers } from './mockData';\nclass MockSocket {\n  constructor() {\n    this.id = 'mock-socket-' + Math.random();\n    this.connected = false;\n    this.listeners = {};\n    this.rooms = new Set();\n\n    // Auto connect after 500ms\n    setTimeout(() => {\n      this.connected = true;\n      this.emit('connect');\n\n      // Send initial online users\n      const onlineUserIds = mockUsers.filter(u => u.online).map(u => u._id);\n      this.emit('onlineUsers', onlineUserIds);\n    }, 500);\n  }\n  on(event, callback) {\n    if (!this.listeners[event]) {\n      this.listeners[event] = [];\n    }\n    this.listeners[event].push(callback);\n  }\n  off(event, callback) {\n    if (!this.listeners[event]) return;\n    if (callback) {\n      this.listeners[event] = this.listeners[event].filter(cb => cb !== callback);\n    } else {\n      delete this.listeners[event];\n    }\n  }\n  emit(event, data) {\n    console.log('ðŸ”µ Mock Socket EMIT:', event, data);\n\n    // Handle internal events\n    if (event === 'connect' || event === 'disconnect') {\n      if (this.listeners[event]) {\n        this.listeners[event].forEach(cb => cb());\n      }\n      return;\n    }\n\n    // Emit to listeners\n    if (this.listeners[event]) {\n      this.listeners[event].forEach(cb => cb(data));\n    }\n\n    // Simulate server responses\n    this.simulateServerResponse(event, data);\n  }\n  simulateServerResponse(event, data) {\n    switch (event) {\n      case 'sendMessage':\n        // Simulate receiving the message back\n        setTimeout(() => {\n          this.emit('newMessage', {\n            ...data,\n            _id: 'msg-' + Date.now(),\n            createdAt: new Date().toISOString(),\n            status: 'sent'\n          });\n        }, 100);\n        break;\n      case 'typing':\n        // Simulate other user typing\n        if (Math.random() > 0.7) {\n          // 30% chance\n          setTimeout(() => {\n            const randomUser = mockUsers[Math.floor(Math.random() * mockUsers.length)];\n            this.emit('userTyping', {\n              userId: randomUser._id,\n              conversationId: data.conversationId,\n              isTyping: true\n            });\n\n            // Stop typing after 2s\n            setTimeout(() => {\n              this.emit('userTyping', {\n                userId: randomUser._id,\n                conversationId: data.conversationId,\n                isTyping: false\n              });\n            }, 2000);\n          }, 500);\n        }\n        break;\n      case 'markAsRead':\n        // Simulate status update\n        setTimeout(() => {\n          data.messageIds.forEach(msgId => {\n            this.emit('messageStatusUpdate', {\n              messageId: msgId,\n              status: 'read'\n            });\n          });\n        }, 200);\n        break;\n      case 'joinConversation':\n        this.rooms.add(data);\n        console.log('âœ… Joined conversation:', data);\n        break;\n      case 'leaveConversation':\n        this.rooms.delete(data);\n        console.log('ðŸ‘‹ Left conversation:', data);\n        break;\n    }\n  }\n  close() {\n    this.connected = false;\n    this.emit('disconnect');\n    this.listeners = {};\n    this.rooms.clear();\n  }\n\n  // Simulate random events for testing\n  simulateRandomEvents() {\n    // Random user comes online\n    setInterval(() => {\n      if (Math.random() > 0.8) {\n        const randomUser = mockUsers[Math.floor(Math.random() * mockUsers.length)];\n        const onlineUserIds = mockUsers.filter(u => u.online).map(u => u._id);\n        if (!onlineUserIds.includes(randomUser._id)) {\n          onlineUserIds.push(randomUser._id);\n        }\n        this.emit('onlineUsers', onlineUserIds);\n      }\n    }, 10000); // Every 10s\n  }\n}\n\n// Factory function\nexport const createMockSocket = () => {\n  const socket = new MockSocket();\n\n  // Enable random events for more realistic testing\n  if (process.env.NODE_ENV === 'development') {\n    socket.simulateRandomEvents();\n  }\n  return socket;\n};","map":{"version":3,"names":["mockUsers","MockSocket","constructor","id","Math","random","connected","listeners","rooms","Set","setTimeout","emit","onlineUserIds","filter","u","online","map","_id","on","event","callback","push","off","cb","data","console","log","forEach","simulateServerResponse","Date","now","createdAt","toISOString","status","randomUser","floor","length","userId","conversationId","isTyping","messageIds","msgId","messageId","add","delete","close","clear","simulateRandomEvents","setInterval","includes","createMockSocket","socket","process","env","NODE_ENV"],"sources":["D:/mid-project-582786/source/fe/src/services/mockSocket.js"],"sourcesContent":["// src/services/mockSocket.js\r\n// Mock Socket.IO Ä‘á»ƒ test frontend\r\n\r\nimport { mockUsers } from './mockData';\r\n\r\nclass MockSocket {\r\n  constructor() {\r\n    this.id = 'mock-socket-' + Math.random();\r\n    this.connected = false;\r\n    this.listeners = {};\r\n    this.rooms = new Set();\r\n    \r\n    // Auto connect after 500ms\r\n    setTimeout(() => {\r\n      this.connected = true;\r\n      this.emit('connect');\r\n      \r\n      // Send initial online users\r\n      const onlineUserIds = mockUsers\r\n        .filter(u => u.online)\r\n        .map(u => u._id);\r\n      this.emit('onlineUsers', onlineUserIds);\r\n    }, 500);\r\n  }\r\n\r\n  on(event, callback) {\r\n    if (!this.listeners[event]) {\r\n      this.listeners[event] = [];\r\n    }\r\n    this.listeners[event].push(callback);\r\n  }\r\n\r\n  off(event, callback) {\r\n    if (!this.listeners[event]) return;\r\n    \r\n    if (callback) {\r\n      this.listeners[event] = this.listeners[event].filter(\r\n        cb => cb !== callback\r\n      );\r\n    } else {\r\n      delete this.listeners[event];\r\n    }\r\n  }\r\n\r\n  emit(event, data) {\r\n    console.log('ðŸ”µ Mock Socket EMIT:', event, data);\r\n    \r\n    // Handle internal events\r\n    if (event === 'connect' || event === 'disconnect') {\r\n      if (this.listeners[event]) {\r\n        this.listeners[event].forEach(cb => cb());\r\n      }\r\n      return;\r\n    }\r\n    \r\n    // Emit to listeners\r\n    if (this.listeners[event]) {\r\n      this.listeners[event].forEach(cb => cb(data));\r\n    }\r\n    \r\n    // Simulate server responses\r\n    this.simulateServerResponse(event, data);\r\n  }\r\n\r\n  simulateServerResponse(event, data) {\r\n    switch (event) {\r\n      case 'sendMessage':\r\n        // Simulate receiving the message back\r\n        setTimeout(() => {\r\n          this.emit('newMessage', {\r\n            ...data,\r\n            _id: 'msg-' + Date.now(),\r\n            createdAt: new Date().toISOString(),\r\n            status: 'sent'\r\n          });\r\n        }, 100);\r\n        break;\r\n\r\n      case 'typing':\r\n        // Simulate other user typing\r\n        if (Math.random() > 0.7) { // 30% chance\r\n          setTimeout(() => {\r\n            const randomUser = mockUsers[Math.floor(Math.random() * mockUsers.length)];\r\n            this.emit('userTyping', {\r\n              userId: randomUser._id,\r\n              conversationId: data.conversationId,\r\n              isTyping: true\r\n            });\r\n            \r\n            // Stop typing after 2s\r\n            setTimeout(() => {\r\n              this.emit('userTyping', {\r\n                userId: randomUser._id,\r\n                conversationId: data.conversationId,\r\n                isTyping: false\r\n              });\r\n            }, 2000);\r\n          }, 500);\r\n        }\r\n        break;\r\n\r\n      case 'markAsRead':\r\n        // Simulate status update\r\n        setTimeout(() => {\r\n          data.messageIds.forEach(msgId => {\r\n            this.emit('messageStatusUpdate', {\r\n              messageId: msgId,\r\n              status: 'read'\r\n            });\r\n          });\r\n        }, 200);\r\n        break;\r\n\r\n      case 'joinConversation':\r\n        this.rooms.add(data);\r\n        console.log('âœ… Joined conversation:', data);\r\n        break;\r\n\r\n      case 'leaveConversation':\r\n        this.rooms.delete(data);\r\n        console.log('ðŸ‘‹ Left conversation:', data);\r\n        break;\r\n    }\r\n  }\r\n\r\n  close() {\r\n    this.connected = false;\r\n    this.emit('disconnect');\r\n    this.listeners = {};\r\n    this.rooms.clear();\r\n  }\r\n\r\n  // Simulate random events for testing\r\n  simulateRandomEvents() {\r\n    // Random user comes online\r\n    setInterval(() => {\r\n      if (Math.random() > 0.8) {\r\n        const randomUser = mockUsers[Math.floor(Math.random() * mockUsers.length)];\r\n        const onlineUserIds = mockUsers\r\n          .filter(u => u.online)\r\n          .map(u => u._id);\r\n        \r\n        if (!onlineUserIds.includes(randomUser._id)) {\r\n          onlineUserIds.push(randomUser._id);\r\n        }\r\n        \r\n        this.emit('onlineUsers', onlineUserIds);\r\n      }\r\n    }, 10000); // Every 10s\r\n  }\r\n}\r\n\r\n// Factory function\r\nexport const createMockSocket = () => {\r\n  const socket = new MockSocket();\r\n  \r\n  // Enable random events for more realistic testing\r\n  if (process.env.NODE_ENV === 'development') {\r\n    socket.simulateRandomEvents();\r\n  }\r\n  \r\n  return socket;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}